; http://rgrinberg.com/posts/dune-upcoming-1-1/#faster-compilation-in-development-mode
; -opaque used per default now? cmp default build (dev?) vs. `--profile release`

(include_subdirs unqualified)

(library
  (name goblint_lib)
  (public_name goblint.lib)
  (wrapped false)
  (modules :standard \ goblint mainarinc maindomaintest mainspec
    violationZ3 privPrecCompare)
  (libraries goblint-cil.all-features batteries.unthreaded zarith_stubs_js
    qcheck-core.runner
    ; Conditionally compile based on whether apron optional dependency is installed or not.
    ; Alternative dependencies seem like the only way to optionally depend on optional dependencies.
    ; See: https://dune.readthedocs.io/en/stable/concepts.html#alternative-dependencies.
    (select apronDomain.ml from
      (apron apron.polkaMPQ -> apronDomain.apron.ml)
      (-> apronDomain.no-apron.ml)
    )
    (select octApronDomain.ml from
      (apron apron.octD -> octApronDomain.apron.ml)
      (-> octApronDomain.no-apron.ml)
    )
    (select poly.ml from
      (apron -> poly.apron.ml)
      (-> poly.no-apron.ml)
    )
    (select octApron.ml from
      (apron -> octApron.apron.ml)
      (-> octApron.no-apron.ml)
    )
  )
  (preprocess
    (staged_pps ppx_deriving.std ppx_deriving_yojson
      ppx_distr_guards ocaml-monadic))
)

; Workaround for alternative dependencies with unqualified subdirs.
; See: https://github.com/ocaml/dune/issues/4383#issuecomment-805107435.
; TODO: Remove workaround with dune 3.0, where this should get fixed.
(copy_files cdomains/apron/*.ml)
(copy_files analyses/apron/*.ml)

(executables
  (names goblint maindomaintest) ; TODO: separate domaintest executable?
  (public_names goblint -)
  (modes native js) ; https://dune.readthedocs.io/en/stable/dune-files.html#linking-modes
  (modules goblint mainarinc maindomaintest mainspec)
  (libraries goblint.lib)
  (preprocess (staged_pps ppx_deriving.std ppx_deriving_yojson ppx_distr_guards ocaml-monadic))
  (flags :standard -linkall)
)

(executable
  (name privPrecCompare)
  (modules privPrecCompare)
  (libraries goblint.lib)
  (preprocess (staged_pps ppx_deriving.std ppx_deriving_yojson ppx_distr_guards ocaml-monadic))
  (flags :standard -linkall)
)

(rule
  (targets goblint.ml config.ml version.ml)
  (mode fallback) ; do nothing if all targets already exist
  (deps ../scripts/set_version.sh (source_tree .)) ; also depend on src/ such that all files are copied before goblint.ml is generated. Otherwise dune runs this rule in parallel and might be in the middle of building, i.e., some files might not be reached and copied yet.
  (action (chdir .. (run ./make.sh gen)))
)

(rule
  (alias runtest)
  (deps ../goblint ../scripts/update_suite.rb ../Makefile (source_tree ../tests) (source_tree ../includes))
  (action (chdir .. (run ./make.sh test)))
)

(env
  (dev
    (flags (:standard -warn-error -A -w -6-27-32)) ; https://dune.readthedocs.io/en/stable/faq.html#how-to-make-warnings-non-fatal
  )
)
